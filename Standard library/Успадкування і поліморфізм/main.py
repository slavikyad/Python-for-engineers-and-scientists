# -*- coding: utf-8 -*-
"""
# Успадкування і поліморфізм
Успадкування - це можливість створення похідних класів шляхом успадкування ними членів базового класу. Наприклад, атрибут `a` класу `B` успадкований від класу `A`. Поліморфізм - здатність методів з однаковою специфікацією мати різну реалізацію. Наприклад, функції `f` класів `A` і `B` мають одну назву, але різну реалізацію.
"""
class A(object): # визначення класу A, успадкованого від object
    a=0 # атрибут-дане
    def __init__(self,a): # конструктор
        self.a=a # присвоїти атрибуту значення аргументу a
    def f(self,x): # атрибут-метод f
        return self.a+x # повертає a+x
    def f2(self): # атрибут-метод f2
        return self.a+2 # повертає a+2
class B(A): # визначення класу B успадкованого від A
    b=0 # атрибут-дане
    def __init__(self,a,b): # конструктор
        A.__init__(self,a) # виклик конструктора базового класу 
        #super(B, self).__init__(a) # або так
        self.b=b #присвоїти атрибуту значення аргументу b
    def f(self,x): # атрибут-метод f
        return self.b+x # повертає b+x
obj=B(1,2) # створення об'єкта obj класу B, виклик конструктора (a=1,b=2)
print obj.a, obj.b # вивести значення атрибутів
print obj.f(2) # виклик методу f, описаного в класі B
print A.f(obj,2) # виклик методу f, описаного в класі A
print obj.f2() # виклик методу f2
del obj # знищити об'єкт
#print obj.a # помилка! Об'єкта не існує

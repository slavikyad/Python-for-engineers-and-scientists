# -*- coding: utf-8 -*-
"""
# Вбудовані функції для роботи з послідовностями
Для полегшення роботи з послідовностями існують вбудовані функції:

* `filter` - фільтрує послідовність за допомогою заданої функції;
* `map` - застосовує функцію для кожного елемента;
* `reduce` - застосовує до елементів функцію двох аргументів кумулятивно зліва направо;
* `zip` - об'єднує послідовності в список кортежів;
* `enumerate` - генерує пронумеровану послідовність;
* `sorted` - сортує послідовність.
"""
a=[1,2,3,4,5] # список
def fn1(x): return x!=3 # функція повертає істину, якщо x не 3
print filter(fn1,a) # відфільтрований функцією fn1 список
#print filter(lambda x:x!=3,a) # або так
#print [x for x in a if x!=3] # або так
def fn2(x): return x**2 # функція повертає квадрат числа
print map(fn2,a) # застосовує fn2 до кожного елемента
def fn3(x,y): return x+y # функція повертає суму двох чисел
print map(fn3,a,[1,2,3,4,5]) # сума списків
#print map(lambda x,y:x+y,a,[1,2,3,4,5]) # або так
#print [x+y for x,y in zip(a,[1,2,3,4,5])] # або так
print reduce(fn3,a) # підрахувати (((1+2)+3)+4)+5
#print reduce(lambda x, y: x + y, a) # або так
print zip([1,2,3],[4,5,6]) # об'єднати списки
print [i for i in enumerate("abc")] # пронумерований список
print sorted([(1,2),(2,1),(3,3)], key=lambda x: x[1]) # сортувати за елементами з індексом 1
